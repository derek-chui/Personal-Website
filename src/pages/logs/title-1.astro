---
import Layout from '../../layouts/Layout.astro';
---

<style>
    /* General CSS*/

    /* Root */
    :root {
        --bg-dark: #000;
        --text-light: #fff;
        --text-muted: #999;
        --card-bg: #1a1a1a;
        --accent-blue: #2997ff;
        --border-light: rgba(255, 255, 255, 0.1);
        --transition: all 0.3s ease;
        
        --easy-bg: rgba(0, 184, 163, 0.1);
        --easy-text: #00b8a3;
        --medium-bg: rgba(255, 192, 30, 0.1);
        --medium-text: #ffc01e;
        --hard-bg: rgba(255, 55, 95, 0.1);
        --hard-text: #ff375f;
        
        --space-xs: 0.5rem;
        --space-sm: 0.75rem;
        --space-md: 1rem;
        --space-lg: 1.5rem;
        --space-xl: 2rem;
    }

    /* Base Styles */
    body {
        background-color: var(--bg-dark);
        color: var(--text-light);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 
                    'Helvetica Neue', Arial, sans-serif;
        line-height: 1.6;
        margin: 0;
        padding: 0;
    }

    /* Typography */
    h1, h2, h3, h4 {
        font-weight: 600;
        margin-bottom: var(--space-md);
    }

    h1 {
        font-size: 2.5rem;
        margin-bottom: var(--space-xs);
    }

    h2 {
        font-size: 2rem;
        margin-top: var(--space-xl);
        border-bottom: 1px solid var(--border-light);
        padding-bottom: var(--space-xs);
    }

    h3 {
        font-size: 1.5rem;
        margin-top: var(--space-lg);
    }

    h4 {
        font-size: 1.25rem;
    }

    p {
        margin-bottom: var(--space-md);
    }

    /* Layout & Spacing */
    .article {
        max-width: 800px;
        margin: 0 auto;
        padding: 0 1.25rem;
    }

    /*Secion Based CSS

    /* Components */
    .meta {
        display: flex;
        gap: var(--space-lg);
        margin-bottom: var(--space-xl);
        color: var(--text-muted);
        font-size: 0.875rem;
        flex-wrap: wrap;
    }

    /* Tags */
    .tags {
        display: flex;
        gap: var(--space-xs);
        margin: var(--space-lg) 0;
        flex-wrap: wrap;
    }

    .tag {
        background-color: rgba(41, 151, 255, 0.1);
        color: var(--accent-blue);
        padding: var(--space-xs) var(--space-sm);
        border-radius: 1.25rem;
        font-size: 0.75rem;
        font-weight: 500;
    }

    /* Code Blocks */
    pre {
        background-color: var(--card-bg);
        border-radius: 0.5rem;
        padding: var(--space-md);
        overflow-x: auto;
        border: 1px solid var(--border-light);
        margin: var(--space-lg) 0;
    }

    code {
        font-family: 'SF Mono', Menlo, Monaco, Consolas, 'Courier New', monospace;
        font-size: 0.875rem;
    }

    /* Buttons */
    .btn {
        display: inline-block;
        padding: var(--space-sm) var(--space-lg);
        background-color: var(--card-bg);
        color: var(--text-light);
        border-radius: 0.5rem;
        text-align: center;
        transition: var(--transition);
        border: 1px solid var(--border-light);
        margin-top: var(--space-xl);
    }

    .btn:hover {
        background-color: var(--accent-blue);
        transform: translateY(-0.1875rem);
    }

    /* Navigation */
    .nav-links {
        display: flex;
        justify-content: space-between;
        margin-top: var(--space-xl);
        padding-top: var(--space-lg);
        border-top: 1px solid var(--border-light);
    }

    /* Tables */
    table {
        width: 100%;
        border-collapse: collapse;
        margin: var(--space-lg) 0;
    }

    th, td {
        text-align: left;
        padding: var(--space-xs) 0;
        border-bottom: 1px solid var(--border-light);
    }

    ul, ol {
        margin-bottom: var(--space-md);
        padding-left: var(--space-md);
    }

    li {
        margin-bottom: var(--space-xs);
    }

    /* Responsive Adjustments */
    @media (max-width: 768px) {
        h1 { font-size: 2rem; }
        h2 { font-size: 1.75rem; }
        h3 { font-size: 1.25rem; }
        
        .meta {
            gap: var(--space-md);
        }
        
        .article {
            padding: 0 var(--space-md);
        }
    }
</style>

<Layout title="Two Sum - Optimal Solution">
    <div class="article">
        <div style="margin-bottom: var(--space-lg);">
            <a href="/logs" style="color: var(--accent-blue); text-decoration: none; display: inline-flex; align-items: center; gap: var(--space-xs);">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M19 12H5M12 19l-7-7 7-7"/>
                </svg>
                Back to Logs
            </a>
        </div>
        <!-- HEADER-->
        <div>
            <h1>Two Sum Thought Process</h1>
            <div class="meta">
                <span>Published: Mar 26, 2025</span>
                <span>Updated: Mar 27, 2025</span>
                <span>Time to read: 5 minutes</span>
            </div>
            <div class="tags">
                <span class="tag">#neetcode</span>
                <span class="tag">#python</span>
            </div>
        </div>

        <!-- CONTENT -->
        <div>
            <p>The "Two Sum" problem is the perfect starting point for your LeetCode journey. It's often the first problem developers encounter, and understanding its optimal solution teaches fundamental concepts that apply to many other problems.</p>

            <h2>Problem Statement</h2>
            <p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>. You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>

            <h2>Initial Approach (Brute Force)</h2>
            <p>The straightforward solution involves checking every possible pair:</p>
            
            <pre><code>def twoSum(nums, target):
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == target:
                return [i, j]</code></pre>

            <p>This brute force approach has a time complexity of O(n²) because in the worst case, we're checking every combination of elements. The space complexity is O(1) since we're not using any additional data structures.</p>

            <h2>Optimal Solution (Hash Map)</h2>
            <p>We can optimize this to O(n) time complexity using a hash map (dictionary in Python):</p>

            <pre><code>def twoSum(nums, target):
    num_map = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in num_map:
            return [num_map[complement], i]
        num_map[num] = i</code></pre>

            <h3>How It Works</h3>
            <ol>
                <li>We create a dictionary to store numbers and their indices as we iterate</li>
                <li>For each number, we calculate its complement (target - current number)</li>
                <li>If the complement exists in our dictionary, we've found our solution</li>
                <li>If not, we store the current number and its index in the dictionary</li>
            </ol>

            <h2>Complexity Analysis</h2>
            <table style="width:100%; border-collapse: collapse; margin: 24px 0;">
                <tr style="border-bottom: 1px solid rgba(255,255,255,0.1);">
                    <th style="text-align:left; padding: 8px 0;">Approach</th>
                    <th style="text-align:left; padding: 8px 0;">Time Complexity</th>
                    <th style="text-align:left; padding: 8px 0;">Space Complexity</th>
                </tr>
                <tr style="border-bottom: 1px solid rgba(255,255,255,0.1);">
                    <td style="padding: 8px 0;">Brute Force</td>
                    <td style="padding: 8px 0;">O(n²)</td>
                    <td style="padding: 8px 0;">O(1)</td>
                </tr>
                <tr>
                    <td style="padding: 8px 0;">Hash Map</td>
                    <td style="padding: 8px 0;">O(n)</td>
                    <td style="padding: 8px 0;">O(n)</td>
                </tr>
            </table>

            <h2>Key Takeaways</h2>
            <ul>
                <li>Hash maps can dramatically reduce time complexity for lookup operations</li>
                <li>The tradeoff is increased space complexity (O(n) vs O(1))</li>
                <li>This pattern appears in many other problems (e.g., Three Sum, Subarray Sum Equals K)</li>
                <li>Always consider time-space tradeoffs when optimizing solutions</li>
            </ul>

            <!-- <a href="https://leetcode.com/problems/two-sum/" class="btn">Try on LeetCode</a> -->
        </div>

        <!-- NAVIGATION -->
        <div class="nav-links">
            <!-- <a href="#">← Previous: Logs</a> -->
            <!-- <a href="#">Next: Coming Soon →</a> -->
        </div>
    </div>
</Layout>